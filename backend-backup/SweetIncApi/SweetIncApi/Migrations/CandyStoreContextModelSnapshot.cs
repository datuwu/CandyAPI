// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SweetIncApi.BusinessModels;

namespace SweetIncApi.Migrations
{
    [DbContext(typeof(CandyStoreContext))]
    partial class CandyStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SweetIncApi.BusinessModels.Box", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BoxPatternId")
                        .HasColumnType("int")
                        .HasColumnName("boxPatternId");

                    b.Property<int?>("LowerAge")
                        .HasColumnType("int")
                        .HasColumnName("lowerAge");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("UpperAge")
                        .HasColumnType("int")
                        .HasColumnName("upperAge");

                    b.HasKey("Id");

                    b.HasIndex("BoxPatternId");

                    b.ToTable("Box");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.BoxPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("price")
                        .HasDefaultValueSql("((100))");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.ToTable("BoxPattern");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.BoxProduct", b =>
                {
                    b.Property<int>("BoxId")
                        .HasColumnType("int")
                        .HasColumnName("boxId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("BoxId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BoxProduct");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Originid")
                        .HasColumnType("int")
                        .HasColumnName("originid");

                    b.HasKey("Id");

                    b.HasIndex("Originid");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Catagory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Catagory");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime")
                        .HasColumnName("datetime");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('0')");

                    b.Property<int>("Userid")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Orderdetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Boxid")
                        .HasColumnType("int")
                        .HasColumnName("boxid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id", "Boxid");

                    b.HasIndex("Boxid");

                    b.ToTable("Orderdetail");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Origin");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<int>("CatagoryId")
                        .HasColumnType("int")
                        .HasColumnName("catagoryId");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatagoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullname");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<int?>("Roleid")
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Roleid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Box", b =>
                {
                    b.HasOne("SweetIncApi.BusinessModels.BoxPattern", "BoxPattern")
                        .WithMany("Boxes")
                        .HasForeignKey("BoxPatternId")
                        .HasConstraintName("FK_Box_BoxPattern");

                    b.Navigation("BoxPattern");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.BoxProduct", b =>
                {
                    b.HasOne("SweetIncApi.BusinessModels.Box", "Box")
                        .WithMany("BoxProducts")
                        .HasForeignKey("BoxId")
                        .HasConstraintName("FK_BoxProduct_Box")
                        .IsRequired();

                    b.HasOne("SweetIncApi.BusinessModels.Product", "Product")
                        .WithMany("BoxProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_BoxProduct_Product")
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Brand", b =>
                {
                    b.HasOne("SweetIncApi.BusinessModels.Origin", "Origin")
                        .WithMany("Brands")
                        .HasForeignKey("Originid")
                        .HasConstraintName("FK_Brand_origin")
                        .IsRequired();

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Order", b =>
                {
                    b.HasOne("SweetIncApi.BusinessModels.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_Order_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Orderdetail", b =>
                {
                    b.HasOne("SweetIncApi.BusinessModels.Box", "Box")
                        .WithMany("Orderdetails")
                        .HasForeignKey("Boxid")
                        .HasConstraintName("FK_Orderdetail_Box")
                        .IsRequired();

                    b.HasOne("SweetIncApi.BusinessModels.Order", "IdNavigation")
                        .WithMany("Orderdetails")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_Orderdetail_Order")
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Product", b =>
                {
                    b.HasOne("SweetIncApi.BusinessModels.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_Brand")
                        .IsRequired();

                    b.HasOne("SweetIncApi.BusinessModels.Catagory", "Catagory")
                        .WithMany("Products")
                        .HasForeignKey("CatagoryId")
                        .HasConstraintName("FK_Product_Catagory")
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Catagory");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.User", b =>
                {
                    b.HasOne("SweetIncApi.BusinessModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Box", b =>
                {
                    b.Navigation("BoxProducts");

                    b.Navigation("Orderdetails");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.BoxPattern", b =>
                {
                    b.Navigation("Boxes");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Catagory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Order", b =>
                {
                    b.Navigation("Orderdetails");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Origin", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Product", b =>
                {
                    b.Navigation("BoxProducts");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SweetIncApi.BusinessModels.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
